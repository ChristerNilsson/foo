{
  "version": 3,
  "file": "ampm.js",
  "sourceRoot": "..",
  "sources": [
    "ampm.coffee"
  ],
  "names": [],
  "mappings": ";AAAA,IAAA,EAAA,EAAA,GAAA,EAAA,MAAA,EAAA,CAAA,EAAA;;AAAA,GAAA,GAAM,OAAA,CAAQ,QAAR;;AAEN,MAAA,GAAS,QAAA,CAAC,CAAD,EAAG,CAAH,CAAA;EACR,IAAG,CAAA,KAAK,CAAR;AAAe,WAAf;;EACA,KAAA,CAAM,EAAN;EACA,KAAA,CAAM,iBAAN;EACA,KAAA,CAAM,CAAN;EACA,KAAA,CAAM,CAAN,EAJA;;EAMA,MAAM,IAAI,GAAG,CAAC,cAAR,CACL;IAAA,MAAA,EAAQ,CAAR;IACA,QAAA,EAAU,CADV;IAEA,QAAA,EAAU;EAFV,CADK;AAPE;;AAaT,KAAA,GAAQ,OAAO,CAAC;;AAEhB,EAAA,GACC;EAAA,IAAA,EAAK,IAAL;EACA,IAAA,EAAK,IADL;EAEA,IAAA,EAAK,IAFL;EAGA,IAAA,EAAK,IAHL;EAIA,IAAA,EAAK,IAJL;EAKA,IAAA,EAAK,IALL;EAMA,IAAA,EAAK,IANL;EAOA,IAAA,EAAK,IAPL;EAQA,IAAA,EAAK,IARL;EASA,IAAA,EAAK,IATL;EAUA,IAAA,EAAK,IAVL;EAWA,IAAA,EAAK;AAXL;;AAaD,CAAA,GAAI,QAAA,CAAC,KAAD,CAAA;AACH,MAAA,IAAA,EAAA,EAAA,EAAA;EAAA,EAAA,GAAK,KAAK,CAAC,KAAN,CAAY,CAAZ,EAAc,CAAd;EACL,EAAA,GAAK,KAAK,CAAC,KAAN,CAAY,CAAZ,EAAc,CAAd;EACL,IAAA,GAAU,KAAA,GAAQ,OAAX,GAAwB,IAAxB,GAAkC;EACzC,IAAG,EAAA,IAAM,EAAT;IAAiB,EAAA,GAAK,EAAG,CAAA,EAAA,EAAzB;;SACA,EAAA,GAAK,GAAL,GAAW,EAAX,GAAgB,GAAhB,GAAsB;AALnB;;AAOJ,MAAA,CAAO,UAAP,EAAmB,CAAA,CAAE,OAAF,CAAnB;;AACA,MAAA,CAAO,UAAP,EAAmB,CAAA,CAAE,OAAF,CAAnB;;AACA,MAAA,CAAO,UAAP,EAAmB,CAAA,CAAE,OAAF,CAAnB;;AACA,MAAA,CAAO,UAAP,EAAmB,CAAA,CAAE,OAAF,CAAnB;;AACA,MAAA,CAAO,UAAP,EAAmB,CAAA,CAAE,OAAF,CAAnB;;AACA,MAAA,CAAO,UAAP,EAAmB,CAAA,CAAE,OAAF,CAAnB;;AACA,MAAA,CAAO,UAAP,EAAmB,CAAA,CAAE,OAAF,CAAnB;;AACA,MAAA,CAAO,UAAP,EAAmB,CAAA,CAAE,OAAF,CAAnB;;AACA,MAAA,CAAO,UAAP,EAAmB,CAAA,CAAE,OAAF,CAAnB;;AACA,MAAA,CAAO,UAAP,EAAmB,CAAA,CAAE,OAAF,CAAnB;;AAEA,KAAA,CAAM,IAAN",
  "sourcesContent": [
    "ass = require 'assert'\r\n\r\nassert = (a,b) -> \r\n\tif a == b then return\r\n\tprint ''\r\n\tprint 'assert failure:'\r\n\tprint a\r\n\tprint b\r\n\t#throw new Error 'assert failure!'\r\n\tthrow\tnew ass.AssertionError\r\n\t\tactual: b\r\n\t\texpected: a\r\n\t\toperator: 'strictEqual'\r\n\r\n\r\nprint = console.log \r\n\r\nHH = \r\n\t'00':'12'\r\n\t'13':'01'\r\n\t'14':'02'\r\n\t'15':'03'\r\n\t'16':'04'\r\n\t'17':'05'\r\n\t'18':'06'\r\n\t'19':'07'\r\n\t'20':'08'\r\n\t'21':'09'\r\n\t'22':'10'\r\n\t'23':'11' \r\n\r\nf = (hhxmm) ->\r\n\thh = hhxmm.slice 0,2 \r\n\tmm = hhxmm.slice 3,5\r\n\tampm = if hhxmm < '12:00' then 'am' else 'pm'\r\n\tif hh of HH then hh = HH[hh]\r\n\thh + ':' + mm + ' ' + ampm \r\n\r\nassert '12:00 am', f '00:00' \r\nassert '12:01 am', f '00:01'\r\nassert '12:59 am', f '00:59'\r\nassert '01:00 am', f '01:00'\r\nassert '11:59 am', f '11:59'\r\nassert '12:00 xm', f '12:00' \r\nassert '12:01 pm', f '12:01'\r\nassert '12:59 pm', f '12:59'\r\nassert '01:00 pm', f '13:00'\r\nassert '11:59 pm', f '23:59'\r\n\r\nprint 'Ok' "
  ]
}