// Generated by CoffeeScript 2.3.2
var buildTree, initialize;

buildTree = async function(repos, index) {
  var contributors, repo;
  repo = repos[index];
  contributors = (await fetchJSON(repo.contributors_url));
  document.body.innerHTML = '';
  return body(function() {
    header({
      class: "header"
    }, function() {
      var select0;
      p({
        text: "HYF Repositories"
      });
      select0 = select({
        class: "repo-selector",
        "aria-label": "HYF Repositories"
      }, function() {
        var i, key, len, repo1, results;
        xonchange(() => {
          return buildTree(repos, select0.value);
        });
        results = [];
        for (key = i = 0, len = repos.length; i < len; key = ++i) {
          repo1 = repos[key];
          results.push(option({
            text: repo1.name,
            value: key
          }));
        }
        return results;
      });
      return select0.value = index;
    });
    return div({
      id: 'container'
    }, function() {
      div({
        class: "left-div whiteframe"
      }, function() {
        return table({}, function() {
          return tbody({}, function() {
            tr({}, function() {
              td({
                text: "Repository"
              });
              return td({}, function() {
                return a({
                  text: repo.name,
                  href: repo.html_url,
                  target: "_blank"
                });
              });
            });
            tr({}, function() {
              td({
                text: 'Description'
              });
              return td({
                text: repo.description
              });
            });
            tr({}, function() {
              td({
                text: 'Forks'
              });
              return td({
                text: repo.forks
              });
            });
            return tr({}, function() {
              td({
                text: 'Updated'
              });
              return td({
                text: new Date(repo.updated_at).toLocaleString('sv')
              });
            });
          });
        });
      });
      return div({
        class: "right-div whiteframe"
      }, function() {
        p({
          text: "Contributions",
          class: "contributor-header"
        });
        return ul({
          class: "contributor-list"
        }, function() {
          var contributor, i, len, results;
          results = [];
          for (i = 0, len = contributors.length; i < len; i++) {
            contributor = contributors[i];
            results.push(((contributor) => {
              return li({
                class: "contributor-item",
                "aria-label": contributor.login,
                tabindex: 0
              }, function() {
                xonclick(() => {
                  return window.open(contributor.html_url, "_blank");
                });
                xonkeyup((t) => {
                  if (t.key === 'Enter') {
                    return window.open(contributor.html_url, "_blank");
                  }
                });
                img({
                  src: contributor.avatar_url,
                  height: 48,
                  class: "contributor-avatar"
                });
                return div({
                  class: "contributor-data"
                }, function() {
                  div({
                    text: contributor.login
                  });
                  return div({
                    text: contributor.contributions,
                    class: "contributor-badge"
                  });
                });
              });
            })(contributor));
          }
          return results;
        });
      });
    });
  });
};

initialize = async() => {
  var repos;
  repos = (await fetchJSON("https://api.github.com/orgs/HackYourFuture/repos?per_page=100"));
  repos.sort((a, b) => {
    return a.name.localeCompare(b.name);
  });
  return buildTree(repos, 0);
};

initialize();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXBwMS5qcyIsInNvdXJjZVJvb3QiOiIuLiIsInNvdXJjZXMiOlsiY29mZmVlXFxBcHAxLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsSUFBQSxTQUFBLEVBQUE7O0FBQUEsU0FBQSxHQUFZLE1BQUEsUUFBQSxDQUFDLEtBQUQsRUFBUSxLQUFSLENBQUE7QUFDWCxNQUFBLFlBQUEsRUFBQTtFQUFBLElBQUEsR0FBTyxLQUFNLENBQUEsS0FBQTtFQUNiLFlBQUEsR0FBZSxDQUFBLE1BQU0sU0FBQSxDQUFVLElBQUksQ0FBQyxnQkFBZixDQUFOO0VBQ2YsUUFBUSxDQUFDLElBQUksQ0FBQyxTQUFkLEdBQTBCO1NBQzFCLElBQUEsQ0FBSyxRQUFBLENBQUEsQ0FBQTtJQUNKLE1BQUEsQ0FBTztNQUFFLEtBQUEsRUFBUTtJQUFWLENBQVAsRUFBNkIsUUFBQSxDQUFBLENBQUE7QUFDNUIsVUFBQTtNQUFBLENBQUEsQ0FBRTtRQUFFLElBQUEsRUFBTztNQUFULENBQUY7TUFDQSxPQUFBLEdBQVUsTUFBQSxDQUFPO1FBQUUsS0FBQSxFQUFRLGVBQVY7UUFBMkIsWUFBQSxFQUFlO01BQTFDLENBQVAsRUFBdUUsUUFBQSxDQUFBLENBQUE7QUFDaEYsWUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxLQUFBLEVBQUE7UUFBQSxTQUFBLENBQVUsQ0FBQSxDQUFBLEdBQUE7aUJBQUcsU0FBQSxDQUFVLEtBQVYsRUFBaUIsT0FBTyxDQUFDLEtBQXpCO1FBQUgsQ0FBVjtBQUNBO1FBQUEsS0FBQSxtREFBQTs7dUJBQ0MsTUFBQSxDQUFPO1lBQUUsSUFBQSxFQUFPLEtBQUssQ0FBQyxJQUFmO1lBQXFCLEtBQUEsRUFBUTtVQUE3QixDQUFQO1FBREQsQ0FBQTs7TUFGZ0YsQ0FBdkU7YUFJVixPQUFPLENBQUMsS0FBUixHQUFnQjtJQU5ZLENBQTdCO1dBT0EsR0FBQSxDQUFJO01BQUMsRUFBQSxFQUFLO0lBQU4sQ0FBSixFQUF3QixRQUFBLENBQUEsQ0FBQTtNQUN2QixHQUFBLENBQUk7UUFBRSxLQUFBLEVBQVE7TUFBVixDQUFKLEVBQXVDLFFBQUEsQ0FBQSxDQUFBO2VBQ3RDLEtBQUEsQ0FBTSxDQUFBLENBQU4sRUFBVSxRQUFBLENBQUEsQ0FBQTtpQkFDVCxLQUFBLENBQU0sQ0FBQSxDQUFOLEVBQVUsUUFBQSxDQUFBLENBQUE7WUFDVCxFQUFBLENBQUcsQ0FBQSxDQUFILEVBQU8sUUFBQSxDQUFBLENBQUE7Y0FDTixFQUFBLENBQUc7Z0JBQUMsSUFBQSxFQUFNO2NBQVAsQ0FBSDtxQkFDQSxFQUFBLENBQUcsQ0FBQSxDQUFILEVBQU8sUUFBQSxDQUFBLENBQUE7dUJBQUcsQ0FBQSxDQUFFO2tCQUFDLElBQUEsRUFBTSxJQUFJLENBQUMsSUFBWjtrQkFBa0IsSUFBQSxFQUFNLElBQUksQ0FBQyxRQUE3QjtrQkFBdUMsTUFBQSxFQUFPO2dCQUE5QyxDQUFGO2NBQUgsQ0FBUDtZQUZNLENBQVA7WUFHQSxFQUFBLENBQUcsQ0FBQSxDQUFILEVBQU8sUUFBQSxDQUFBLENBQUE7Y0FDTixFQUFBLENBQUc7Z0JBQUMsSUFBQSxFQUFNO2NBQVAsQ0FBSDtxQkFDQSxFQUFBLENBQUc7Z0JBQUMsSUFBQSxFQUFNLElBQUksQ0FBQztjQUFaLENBQUg7WUFGTSxDQUFQO1lBR0EsRUFBQSxDQUFHLENBQUEsQ0FBSCxFQUFPLFFBQUEsQ0FBQSxDQUFBO2NBQ04sRUFBQSxDQUFHO2dCQUFDLElBQUEsRUFBTTtjQUFQLENBQUg7cUJBQ0EsRUFBQSxDQUFHO2dCQUFDLElBQUEsRUFBTSxJQUFJLENBQUM7Y0FBWixDQUFIO1lBRk0sQ0FBUDttQkFHQSxFQUFBLENBQUcsQ0FBQSxDQUFILEVBQU8sUUFBQSxDQUFBLENBQUE7Y0FDTixFQUFBLENBQUc7Z0JBQUMsSUFBQSxFQUFNO2NBQVAsQ0FBSDtxQkFDQSxFQUFBLENBQUc7Z0JBQUMsSUFBQSxFQUFNLElBQUksSUFBSixDQUFTLElBQUksQ0FBQyxVQUFkLENBQXlCLENBQUMsY0FBMUIsQ0FBeUMsSUFBekM7Y0FBUCxDQUFIO1lBRk0sQ0FBUDtVQVZTLENBQVY7UUFEUyxDQUFWO01BRHNDLENBQXZDO2FBZUEsR0FBQSxDQUFJO1FBQUUsS0FBQSxFQUFRO01BQVYsQ0FBSixFQUF3QyxRQUFBLENBQUEsQ0FBQTtRQUN2QyxDQUFBLENBQUU7VUFBRSxJQUFBLEVBQU8sZUFBVDtVQUEwQixLQUFBLEVBQVE7UUFBbEMsQ0FBRjtlQUNBLEVBQUEsQ0FBRztVQUFFLEtBQUEsRUFBUTtRQUFWLENBQUgsRUFBbUMsUUFBQSxDQUFBLENBQUE7QUFDbEMsY0FBQSxXQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQTtBQUFBO1VBQUEsS0FBQSw4Q0FBQTs7eUJBQ0ksQ0FBQSxDQUFDLFdBQUQsQ0FBQSxHQUFBO3FCQUNGLEVBQUEsQ0FBRztnQkFBQyxLQUFBLEVBQU0sa0JBQVA7Z0JBQTJCLFlBQUEsRUFBYSxXQUFXLENBQUMsS0FBcEQ7Z0JBQTJELFFBQUEsRUFBUztjQUFwRSxDQUFILEVBQTJFLFFBQUEsQ0FBQSxDQUFBO2dCQUMxRSxRQUFBLENBQVMsQ0FBQSxDQUFBLEdBQUE7eUJBQUcsTUFBTSxDQUFDLElBQVAsQ0FBWSxXQUFXLENBQUMsUUFBeEIsRUFBa0MsUUFBbEM7Z0JBQUgsQ0FBVDtnQkFDQSxRQUFBLENBQVMsQ0FBQyxDQUFELENBQUEsR0FBQTtrQkFBTyxJQUFHLENBQUMsQ0FBQyxHQUFGLEtBQVMsT0FBWjsyQkFBeUIsTUFBTSxDQUFDLElBQVAsQ0FBWSxXQUFXLENBQUMsUUFBeEIsRUFBa0MsUUFBbEMsRUFBekI7O2dCQUFQLENBQVQ7Z0JBQ0EsR0FBQSxDQUFJO2tCQUFFLEdBQUEsRUFBTSxXQUFXLENBQUMsVUFBcEI7a0JBQWdDLE1BQUEsRUFBUyxFQUF6QztrQkFBNkMsS0FBQSxFQUFRO2dCQUFyRCxDQUFKO3VCQUNBLEdBQUEsQ0FBSTtrQkFBRSxLQUFBLEVBQVE7Z0JBQVYsQ0FBSixFQUFtQyxRQUFBLENBQUEsQ0FBQTtrQkFDbEMsR0FBQSxDQUFJO29CQUFFLElBQUEsRUFBTyxXQUFXLENBQUM7a0JBQXJCLENBQUo7eUJBQ0EsR0FBQSxDQUFJO29CQUFFLElBQUEsRUFBTyxXQUFXLENBQUMsYUFBckI7b0JBQW9DLEtBQUEsRUFBUTtrQkFBNUMsQ0FBSjtnQkFGa0MsQ0FBbkM7Y0FKMEUsQ0FBM0U7WUFERSxDQUFBLENBQUgsQ0FBSSxXQUFKO1VBREQsQ0FBQTs7UUFEa0MsQ0FBbkM7TUFGdUMsQ0FBeEM7SUFoQnVCLENBQXhCO0VBUkksQ0FBTDtBQUpXOztBQXdDWixVQUFBLEdBQWEsS0FBQSxDQUFBLENBQUEsR0FBQTtBQUNaLE1BQUE7RUFBQSxLQUFBLEdBQVEsQ0FBQSxNQUFNLFNBQUEsQ0FBVSwrREFBVixDQUFOO0VBQ1IsS0FBSyxDQUFDLElBQU4sQ0FBVyxDQUFDLENBQUQsRUFBRyxDQUFILENBQUEsR0FBQTtXQUFTLENBQUMsQ0FBQyxJQUFJLENBQUMsYUFBUCxDQUFxQixDQUFDLENBQUMsSUFBdkI7RUFBVCxDQUFYO1NBQ0EsU0FBQSxDQUFVLEtBQVYsRUFBZ0IsQ0FBaEI7QUFIWTs7QUFJYixVQUFBLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJidWlsZFRyZWUgPSAocmVwb3MsIGluZGV4KSAtPlxyXG5cdHJlcG8gPSByZXBvc1tpbmRleF1cclxuXHRjb250cmlidXRvcnMgPSBhd2FpdCBmZXRjaEpTT04gcmVwby5jb250cmlidXRvcnNfdXJsXHJcblx0ZG9jdW1lbnQuYm9keS5pbm5lckhUTUwgPSAnJ1xyXG5cdGJvZHkgLT5cclxuXHRcdGhlYWRlciB7IGNsYXNzIDogXCJoZWFkZXJcIiB9LCAtPlxyXG5cdFx0XHRwIHsgdGV4dCA6IFwiSFlGIFJlcG9zaXRvcmllc1wifVxyXG5cdFx0XHRzZWxlY3QwID0gc2VsZWN0IHsgY2xhc3MgOiBcInJlcG8tc2VsZWN0b3JcIiwgXCJhcmlhLWxhYmVsXCIgOiBcIkhZRiBSZXBvc2l0b3JpZXNcIiB9LCAtPlxyXG5cdFx0XHRcdHhvbmNoYW5nZSA9PiBidWlsZFRyZWUgcmVwb3MsIHNlbGVjdDAudmFsdWVcclxuXHRcdFx0XHRmb3IgcmVwbzEsa2V5IGluIHJlcG9zXHJcblx0XHRcdFx0XHRvcHRpb24geyB0ZXh0IDogcmVwbzEubmFtZSwgdmFsdWUgOiBrZXkgfVxyXG5cdFx0XHRzZWxlY3QwLnZhbHVlID0gaW5kZXhcclxuXHRcdGRpdiB7aWQgOiAnY29udGFpbmVyJ30sIC0+XHJcblx0XHRcdGRpdiB7IGNsYXNzIDogXCJsZWZ0LWRpdiB3aGl0ZWZyYW1lXCIgfSwgLT5cclxuXHRcdFx0XHR0YWJsZSB7fSwgLT5cclxuXHRcdFx0XHRcdHRib2R5IHt9LCAtPlxyXG5cdFx0XHRcdFx0XHR0ciB7fSwgLT5cclxuXHRcdFx0XHRcdFx0XHR0ZCB7dGV4dDogXCJSZXBvc2l0b3J5XCJ9XHJcblx0XHRcdFx0XHRcdFx0dGQge30sIC0+IGEge3RleHQ6IHJlcG8ubmFtZSwgaHJlZjogcmVwby5odG1sX3VybCwgdGFyZ2V0OlwiX2JsYW5rXCJ9XHJcblx0XHRcdFx0XHRcdHRyIHt9LCAtPlxyXG5cdFx0XHRcdFx0XHRcdHRkIHt0ZXh0OiAnRGVzY3JpcHRpb24nfVxyXG5cdFx0XHRcdFx0XHRcdHRkIHt0ZXh0OiByZXBvLmRlc2NyaXB0aW9ufVxyXG5cdFx0XHRcdFx0XHR0ciB7fSwgLT5cclxuXHRcdFx0XHRcdFx0XHR0ZCB7dGV4dDogJ0ZvcmtzJ31cclxuXHRcdFx0XHRcdFx0XHR0ZCB7dGV4dDogcmVwby5mb3Jrc31cclxuXHRcdFx0XHRcdFx0dHIge30sIC0+XHJcblx0XHRcdFx0XHRcdFx0dGQge3RleHQ6ICdVcGRhdGVkJ31cclxuXHRcdFx0XHRcdFx0XHR0ZCB7dGV4dDogbmV3IERhdGUocmVwby51cGRhdGVkX2F0KS50b0xvY2FsZVN0cmluZygnc3YnKX1cclxuXHRcdFx0ZGl2IHsgY2xhc3MgOiBcInJpZ2h0LWRpdiB3aGl0ZWZyYW1lXCIgfSwgLT5cclxuXHRcdFx0XHRwIHsgdGV4dCA6IFwiQ29udHJpYnV0aW9uc1wiLCBjbGFzcyA6IFwiY29udHJpYnV0b3ItaGVhZGVyXCIgfVxyXG5cdFx0XHRcdHVsIHsgY2xhc3MgOiBcImNvbnRyaWJ1dG9yLWxpc3RcIiB9LCAtPlxyXG5cdFx0XHRcdFx0Zm9yIGNvbnRyaWJ1dG9yIGluIGNvbnRyaWJ1dG9yc1xyXG5cdFx0XHRcdFx0XHRkbyAoY29udHJpYnV0b3IpID0+XHJcblx0XHRcdFx0XHRcdFx0bGkge2NsYXNzOlwiY29udHJpYnV0b3ItaXRlbVwiLCBcImFyaWEtbGFiZWxcIjpjb250cmlidXRvci5sb2dpbiwgdGFiaW5kZXg6MH0sIC0+XHJcblx0XHRcdFx0XHRcdFx0XHR4b25jbGljayA9PiB3aW5kb3cub3BlbiBjb250cmlidXRvci5odG1sX3VybCwgXCJfYmxhbmtcIlxyXG5cdFx0XHRcdFx0XHRcdFx0eG9ua2V5dXAgKHQpID0+IGlmIHQua2V5ID09ICdFbnRlcicgdGhlbiB3aW5kb3cub3BlbiBjb250cmlidXRvci5odG1sX3VybCwgXCJfYmxhbmtcIlxyXG5cdFx0XHRcdFx0XHRcdFx0aW1nIHsgc3JjIDogY29udHJpYnV0b3IuYXZhdGFyX3VybCwgaGVpZ2h0IDogNDgsIGNsYXNzIDogXCJjb250cmlidXRvci1hdmF0YXJcIn1cclxuXHRcdFx0XHRcdFx0XHRcdGRpdiB7IGNsYXNzIDogXCJjb250cmlidXRvci1kYXRhXCJ9LCAtPlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRkaXYgeyB0ZXh0IDogY29udHJpYnV0b3IubG9naW4gfVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRkaXYgeyB0ZXh0IDogY29udHJpYnV0b3IuY29udHJpYnV0aW9ucywgY2xhc3MgOiBcImNvbnRyaWJ1dG9yLWJhZGdlXCIgfVxyXG5pbml0aWFsaXplID0gKCkgPT4gXHJcblx0cmVwb3MgPSBhd2FpdCBmZXRjaEpTT04gXCJodHRwczovL2FwaS5naXRodWIuY29tL29yZ3MvSGFja1lvdXJGdXR1cmUvcmVwb3M/cGVyX3BhZ2U9MTAwXCJcclxuXHRyZXBvcy5zb3J0IChhLGIpID0+IGEubmFtZS5sb2NhbGVDb21wYXJlIGIubmFtZVxyXG5cdGJ1aWxkVHJlZSByZXBvcywwXHJcbmluaXRpYWxpemUoKSJdfQ==
//# sourceURL=c:\github\foo\019-Coffee\coffee\App1.coffee