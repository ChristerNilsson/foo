// Generated by CoffeeScript 2.3.2
var Page, fetchJSON, print;

Page = class Page {
  constructor() {
    this.createAndAppend = this.createAndAppend.bind(this);
    this.crap = this.crap.bind(this);
    this.head = this.head.bind(this);
    this.body = this.body.bind(this);
    this.a = this.a.bind(this);
    this.div = this.div.bind(this);
    this.h1 = this.h1.bind(this);
    this.h2 = this.h2.bind(this);
    this.h3 = this.h3.bind(this);
    this.header = this.header.bind(this);
    this.img = this.img.bind(this);
    this.li = this.li.bind(this);
    this.option = this.option.bind(this);
    this.p = this.p.bind(this);
    this.select = this.select.bind(this);
    this.table = this.table.bind(this);
    this.tbody = this.tbody.bind(this);
    this.td = this.td.bind(this);
    this.title = this.title.bind(this);
    this.tr = this.tr.bind(this);
    this.ul = this.ul.bind(this);
    this.addListener = this.addListener.bind(this);
    this.wrap = this.wrap.bind(this);
    this.ancestors = [];
  }

  createAndAppend(type, parent, attributes = {}) {
    var element, key, value;
    element = document.createElement(type);
    parent.appendChild(element);
    for (key in attributes) {
      value = attributes[key];
      if (key === 'text') {
        element.textContent = value;
      } else {
        element.setAttribute(key, value);
      }
    }
    return element;
  }

  crap(attributes, f, type) {
    if (typeof type === 'object') {
      this.ancestors.push(type);
    } else {
      this.ancestors.push(this.createAndAppend(type, _.last(this.ancestors), attributes));
    }
    f();
    return this.ancestors.pop();
  }

  head(f = () => {}) {
    return this.crap({}, f, document.head);
  }

  body(f = () => {}) {
    return this.crap({}, f, document.body);
  }

  a(attributes, f = () => {}) {
    return this.crap(attributes, f, 'a');
  }

  div(attributes, f = () => {}) {
    return this.crap(attributes, f, 'div');
  }

  h1(attributes, f = () => {}) {
    return this.crap(attributes, f, 'h1');
  }

  h2(attributes, f = () => {}) {
    return this.crap(attributes, f, 'h2');
  }

  h3(attributes, f = () => {}) {
    return this.crap(attributes, f, 'h3');
  }

  header(attributes, f = () => {}) {
    return this.crap(attributes, f, 'header');
  }

  img(attributes, f = () => {}) {
    return this.crap(attributes, f, 'img');
  }

  li(attributes, f = () => {}) {
    return this.crap(attributes, f, 'li');
  }

  option(attributes, f = () => {}) {
    return this.crap(attributes, f, 'option');
  }

  p(attributes, f = () => {}) {
    return this.crap(attributes, f, 'p');
  }

  select(attributes, f = () => {}) {
    return this.crap(attributes, f, 'select');
  }

  table(attributes, f = () => {}) {
    return this.crap(attributes, f, 'table');
  }

  tbody(attributes, f = () => {}) {
    return this.crap(attributes, f, 'tbody');
  }

  td(attributes, f = () => {}) {
    return this.crap(attributes, f, 'td');
  }

  title(attributes, f = () => {}) {
    return this.crap(attributes, f, 'title');
  }

  tr(attributes, f = () => {}) {
    return this.crap(attributes, f, 'tr');
  }

  ul(attributes, f = () => {}) {
    return this.crap(attributes, f, 'ul');
  }

  addListener(name, f) {
    return _.last(this.ancestors).addEventListener(name, f);
  }

  wrap(parent, f) {
    this.ancestors.push(parent);
    parent.innerHTML = '';
    f();
    return this.ancestors.pop();
  }

};

fetchJSON = function(url) {
  return new Promise(function(success, failure) {
    var req;
    req = new XMLHttpRequest();
    req.open("GET", url);
    req.responseType = "json";
    req.onload = () => {
      if (req.status < 400) {
        return success(req.response);
      } else {
        return failure(new Error(req.statusText));
      }
    };
    req.onerror = () => {
      return failure(new Error("Network request failed"));
    };
    return req.send();
  });
};

print = function() {
  console.log(arguments[0]);
  return arguments[0];
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\foo\019-Coffee\coffee\Page.coffee