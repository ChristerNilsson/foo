// Generated by CoffeeScript 2.3.2
var GitHub, github,
  boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } };

GitHub = class GitHub extends Page {
  constructor(url) {
    super();
    this.buildTree = this.buildTree.bind(this);
    this.buildLeft = this.buildLeft.bind(this);
    this.buildRight = this.buildRight.bind(this);
    this.buildTree(url, 0);
  }

  async buildTree(url, index) {
    var leftDiv, repo, rightDiv;
    boundMethodCheck(this, GitHub);
    leftDiv = null;
    rightDiv = null;
    this.repos = (await fetchJSON(url));
    this.repos.sort((a, b) => {
      return a.name.localeCompare(b.name);
    });
    this.body(() => {
      this.header({
        class: "header"
      }, () => {
        this.p({
          text: "HYF Repositories"
        });
        return this.select({
          class: "repo-selector",
          "aria-label": "HYF Repositories"
        }, () => {
          var i, key, len, ref, repo1, results;
          this.addListener('change', (evt) => {
            var repo;
            repo = this.repos[evt.target.value];
            this.buildLeft(repo, leftDiv);
            return this.buildRight(repo, rightDiv);
          });
          ref = this.repos;
          results = [];
          for (key = i = 0, len = ref.length; i < len; key = ++i) {
            repo1 = ref[key];
            results.push(this.option({
              text: repo1.name,
              value: key
            }));
          }
          return results;
        });
      });
      return this.div({
        id: 'container'
      }, () => {
        leftDiv = this.div({
          class: "left-div whiteframe"
        });
        return rightDiv = this.div({
          class: "right-div whiteframe"
        });
      });
    });
    repo = this.repos[index];
    this.buildLeft(repo, leftDiv);
    return this.buildRight(repo, rightDiv);
  }

  buildLeft(repo, parent) {
    boundMethodCheck(this, GitHub);
    return this.wrap(parent, () => {
      return this.table({}, () => {
        return this.tbody({}, () => {
          this.tr({}, () => {
            this.td({
              text: "Repository"
            });
            return this.td({}, () => {
              return this.a({
                text: repo.name,
                href: repo.html_url,
                target: "_blank"
              });
            });
          });
          this.tr({}, () => {
            this.td({
              text: 'Description'
            });
            return this.td({
              text: repo.description
            });
          });
          this.tr({}, () => {
            this.td({
              text: 'Forks'
            });
            return this.td({
              text: repo.forks
            });
          });
          return this.tr({}, () => {
            this.td({
              text: 'Updated'
            });
            return this.td({
              text: new Date(repo.updated_at).toLocaleString('sv')
            });
          });
        });
      });
    });
  }

  async buildRight(repo, parent) {
    var contributors;
    boundMethodCheck(this, GitHub);
    contributors = (await fetchJSON(repo.contributors_url)); // await before wrap
    return this.wrap(parent, () => {
      this.p({
        text: "Contributions",
        class: "contributor-header"
      });
      return this.ul({
        class: "contributor-list"
      }, () => {
        var contributor, i, len, results;
        results = [];
        for (i = 0, len = contributors.length; i < len; i++) {
          contributor = contributors[i];
          results.push(((contributor) => {
            return this.li({
              class: "contributor-item",
              "aria-label": contributor.login,
              tabindex: 0
            }, () => {
              this.addListener('click', () => {
                return window.open(contributor.html_url, "_blank");
              });
              this.addListener('keyup', (t) => {
                if (t.key === 'Enter') {
                  return window.open(contributor.html_url, "_blank");
                }
              });
              this.img({
                src: contributor.avatar_url,
                height: 48,
                class: "contributor-avatar"
              });
              return this.div({
                class: "contributor-data"
              }, () => {
                this.div({
                  text: contributor.login
                });
                return this.div({
                  text: contributor.contributions,
                  class: "contributor-badge"
                });
              });
            });
          })(contributor));
        }
        return results;
      });
    });
  }

};

github = new GitHub("https://api.github.com/orgs/HackYourFuture/repos?per_page=100");

//github.init

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\foo\019-Coffee\coffee\App2.coffee