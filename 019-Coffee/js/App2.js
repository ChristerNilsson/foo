// Generated by CoffeeScript 2.3.2
var GitHub,
  boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } };

GitHub = class GitHub extends Page {
  constructor(userName) {
    super();
    this.buildTree = this.buildTree.bind(this);
    this.buildLeft = this.buildLeft.bind(this);
    this.buildRight = this.buildRight.bind(this);
    this.userName = userName;
    this.buildTree(`https://api.github.com/orgs/${this.userName}/repos?per_page=100`, 0);
  }

  build(leftDiv, rightDiv) {
    this.buildLeft(leftDiv);
    return this.buildRight(rightDiv);
  }

  async buildTree(url, index) {
    var leftDiv, rightDiv;
    boundMethodCheck(this, GitHub);
    this.repos = (await fetchJSON(url));
    leftDiv = null;
    rightDiv = null;
    this.repos.sort((a, b) => {
      return a.name.localeCompare(b.name);
    });
    this.repo = this.repos[index];
    return this.body(() => {
      this.header({
        class: "header"
      }, () => {
        this.p({
          text: this.userName
        });
        return this.select({
          class: "repo-selector",
          "aria-label": this.userName
        }, () => {
          var i, key, len, ref, repo1, results;
          this.addListener('change', (evt) => {
            this.repo = this.repos[evt.target.value];
            return this.build(leftDiv, rightDiv);
          });
          ref = this.repos;
          results = [];
          for (key = i = 0, len = ref.length; i < len; key = ++i) {
            repo1 = ref[key];
            results.push(this.option({
              text: repo1.name,
              value: key
            }));
          }
          return results;
        });
      });
      return this.div({
        id: 'container'
      }, () => {
        leftDiv = this.div({
          class: "left-div whiteframe"
        });
        rightDiv = this.div({
          class: "right-div whiteframe"
        });
        return this.build(leftDiv, rightDiv);
      });
    });
  }

  buildLeft(parent) {
    boundMethodCheck(this, GitHub);
    return this.wrap(parent, () => {
      return this.table({}, () => {
        return this.tbody({}, () => {
          this.tr({}, () => {
            this.td({
              text: "Repository"
            });
            return this.td({}, () => {
              return this.a({
                text: this.repo.name,
                href: this.repo.html_url,
                target: "_blank"
              });
            });
          });
          this.tr({}, () => {
            this.td({
              text: 'Description'
            });
            return this.td({
              text: this.repo.description
            });
          });
          this.tr({}, () => {
            this.td({
              text: 'Forks'
            });
            return this.td({
              text: this.repo.forks
            });
          });
          return this.tr({}, () => {
            this.td({
              text: 'Updated'
            });
            return this.td({
              text: new Date(this.repo.updated_at).toLocaleString('sv')
            });
          });
        });
      });
    });
  }

  async buildRight(parent) {
    var contributors;
    boundMethodCheck(this, GitHub);
    contributors = (await fetchJSON(this.repo.contributors_url)); // await goes before wrap
    return this.wrap(parent, () => {
      this.p({
        text: "Contributions",
        class: "contributor-header"
      });
      return this.ul({
        class: "contributor-list"
      }, () => {
        var contributor, i, len, results;
        results = [];
        for (i = 0, len = contributors.length; i < len; i++) {
          contributor = contributors[i];
          results.push(((contributor) => {
            return this.li({
              class: "contributor-item",
              "aria-label": contributor.login,
              tabindex: 0
            }, () => {
              this.addListener('click', () => {
                return window.open(contributor.html_url, "_blank");
              });
              this.addListener('keyup', (t) => {
                if (t.key === 'Enter') {
                  return window.open(contributor.html_url, "_blank");
                }
              });
              this.img({
                src: contributor.avatar_url,
                height: 48,
                class: "contributor-avatar"
              });
              return this.div({
                class: "contributor-data"
              }, () => {
                this.div({
                  text: contributor.login
                });
                return this.div({
                  text: contributor.contributions,
                  class: "contributor-badge"
                });
              });
            });
          })(contributor));
        }
        return results;
      });
    });
  }

};

new GitHub("HackYourFuture");

//new GitHub "FooCoding"

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\foo\019-Coffee\coffee\App2.coffee