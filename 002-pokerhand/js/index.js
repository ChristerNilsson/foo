// Generated by CoffeeScript 2.3.2
var assert, bsort, calc, compare, poker, print, range, reverse, sign;

assert = chai.assert.deepStrictEqual;

range = _.range;

print = console.log;

print('##### begin #####');

reverse = function(a) {
  return a.reverse();
};

sign = function(a, b) {
  if (a < b) {
    return 1;
  } else {
    if (a > b) {
      return -1;
    } else {
      return 0;
    }
  }
};

assert(-1, sign(2, 1));

assert(0, sign(3, 333));

assert(1, sign(1, 2));

compare = function(a, b) {
  var c, i, k, len, ref;
  if (typeof a === "object" && typeof b === "object") {
    ref = range(Math.min(a.length, b.length));
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      c = compare(a[i], b[i]);
      if (c !== 0) {
        return c;
      }
    }
  } else {
    return sign(a, b); //(if a > b then -1 else (if a < b then 1 else 0))
  }
  return 0;
};

assert(1, compare(12, 13));

assert(0, compare(12, 12));

assert(-1, compare(13, 12));

assert(-1, compare([1, 11], [1, 2]));

assert(0, compare([1, 11], [1, 11]));

assert(1, compare([1, 2], [1, 11]));

assert(1, compare([1, '11'], [1, '2']));

assert(0, compare([1, '11'], [1, '11']));

assert(-1, compare([1, '2'], [1, '11']));

bsort = function(list, cmp = compare) {
  var i, j, k, l, len, len1, ref, ref1;
  ref = range(list.length);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    ref1 = range(list.length - 1);
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      j = ref1[l];
      if (cmp(list[j], list[j + 1]) < 0) {
        [list[j], list[j + 1]] = [list[j + 1], list[j]];
      }
    }
  }
  return list;
};

assert([1, 2, 8], bsort([1, 8, 2], compare));

assert([1, 2, 8], bsort([1, 8, 2], compare));

assert([[1], [2], [8]], bsort([[1], [8], [2]], compare));

assert([[2, 1], [2, 2], [2, 8]], bsort([[2, 1], [2, 8], [2, 2]], compare));

assert([[1, 7], [1, 8], [1, 9]], bsort([[1, 8], [1, 7], [1, 9]], compare));

assert([1, 2, 3, 4], bsort([3, 2, 4, 1], compare));

poker = function(a, b) {
  return compare(calc(a.split(" ")), calc(b.split(" ")));
};

calc = function(hand) {
  var card, cnt, flush, groups, rank, ranks, score, straight, suit;
  groups = _.groupBy((function() {
    var k, len, results;
    results = [];
    for (k = 0, len = hand.length; k < len; k++) {
      card = hand[k];
      results.push('  23456789TJQKA'.indexOf(card[2]));
    }
    return results;
  })());
  [score, ranks] = _.unzip(reverse(bsort((function() {
    var results;
    results = [];
    for (rank in groups) {
      cnt = groups[rank];
      results.push([cnt.length, parseInt(rank)]);
    }
    return results;
  })())));
  if (score.length === 5) {
    if (compare(ranks, [14, 5, 4, 3, 2]) === 0) {
      ranks = [5, 4, 3, 2, 1];
    }
    straight = ranks[0] - ranks[4] === 4 ? 1 : 0;
    flush = _.size(_.uniq((function() {
      var k, len, results;
      results = [];
      for (k = 0, len = hand.length; k < len; k++) {
        suit = hand[k];
        results.push(suit.substring(0, 2));
      }
      return results;
    })())) === 1 ? 1 : 0;
    score = [[[1], [3, 1, 1, 1]], [[3, 1, 1, 2], [5]]][flush][straight];
  }
  return [score, ranks];
};

assert(-1, poker('kl8 ruA ru8 klA kl9', 'ru7 sp2 ru5 sp3 klA'));

assert(1, poker('kl8 spT klK hj9 sp4', 'ru7 sp2 ru5 sp3 klA'));

assert(1, poker('kl8 ruA ru8 klA kl9', 'kl8 ruA ru8 klA klT'));

assert(-1, poker('kl8 ruA ru8 klA kl9', 'kl8 ruA ru8 klA kl7'));

assert(1, poker('kl8 ruA ru8 klA kl9', 'klT ruA ruT klA kl9'));

assert(0, poker('spA sp2 sp3 sp4 sp5', 'ruA ru2 ru3 ru4 ru5'));

assert(1, poker('spA hjA ruA klA sp5', 'ruA ru2 ru3 ru4 ru5'));

assert(-1, poker('ru7 sp7 hj7 kl7 spJ', 'ru6 sp5 hj6 kl6 spQ'));

assert(-1, poker('ru8 sp8 hj8 kl9 sp9', 'ru6 sp6 hj6 ru9 hj9'));

assert(0, poker('ru7 ru3 ru5 ru9 ruK', 'hj7 hj3 hj5 hj9 hjK'));

assert(0, poker('ru7 ru3 ru5 ru9 ruK', 'hj7 hj3 hj5 hj9 hjK'));

assert(0, poker('ru7 ru3 ru5 ru9 ruK', 'hj7 hj3 hj5 hj9 hjK'));

assert(1, poker('ru7 hj8 ru9 hj5 ru6', 'hj7 ru8 kl9 hjT sp6'));

assert(1, poker('ru7 hj8 ru8 kl8 ruJ', 'kl7 hj9 ru9 kl9 ruQ'));

assert(-1, poker('ru7 hj7 ru8 kl8 ruJ', 'sp7 kl7 sp8 hj8 ruT'));

assert(1, poker('hj7 kl3 sp3 kl4 hjA', 'sp7 hj3 ru3 klK spA'));

assert(1, poker('sp7 hj3 ru2 kl4 spA', 'hj7 ru3 ru5 sp4 hjA'));

print('#####  end  #####');

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiLi4iLCJzb3VyY2VzIjpbImluZGV4LmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsSUFBQSxNQUFBLEVBQUEsS0FBQSxFQUFBLElBQUEsRUFBQSxPQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsT0FBQSxFQUFBOztBQUFBLE1BQUEsR0FBUyxJQUFJLENBQUMsTUFBTSxDQUFDOztBQUNyQixLQUFBLEdBQVEsQ0FBQyxDQUFDOztBQUNWLEtBQUEsR0FBUSxPQUFPLENBQUM7O0FBQ2hCLEtBQUEsQ0FBTSxtQkFBTjs7QUFFQSxPQUFBLEdBQVUsUUFBQSxDQUFDLENBQUQsQ0FBQTtTQUFPLENBQUMsQ0FBQyxPQUFGLENBQUE7QUFBUDs7QUFDVixJQUFBLEdBQU8sUUFBQSxDQUFDLENBQUQsRUFBRyxDQUFILENBQUE7RUFBVSxJQUFHLENBQUEsR0FBSSxDQUFQO1dBQWMsRUFBZDtHQUFBLE1BQUE7SUFBc0IsSUFBRyxDQUFBLEdBQUksQ0FBUDthQUFjLENBQUMsRUFBZjtLQUFBLE1BQUE7YUFBc0IsRUFBdEI7S0FBdEI7O0FBQVY7O0FBQ1AsTUFBQSxDQUFPLENBQUMsQ0FBUixFQUFXLElBQUEsQ0FBSyxDQUFMLEVBQU8sQ0FBUCxDQUFYOztBQUNBLE1BQUEsQ0FBUSxDQUFSLEVBQVcsSUFBQSxDQUFLLENBQUwsRUFBTyxHQUFQLENBQVg7O0FBQ0EsTUFBQSxDQUFRLENBQVIsRUFBVyxJQUFBLENBQUssQ0FBTCxFQUFPLENBQVAsQ0FBWDs7QUFFQSxPQUFBLEdBQVUsUUFBQSxDQUFDLENBQUQsRUFBRyxDQUFILENBQUE7QUFDVCxNQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQTtFQUFBLElBQUcsT0FBTyxDQUFQLEtBQVksUUFBWixJQUF5QixPQUFPLENBQVAsS0FBWSxRQUF4QztBQUNDO0lBQUEsS0FBQSxxQ0FBQTs7TUFDQyxDQUFBLEdBQUksT0FB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LHFCQUE3QixDQUFYOztBQUNBLE1BQUEsQ0FBUSxDQUFSLEVBQVcsS0FBQSxDQUFNLHFCQUFOLEVBQTZCLHFCQUE3QixDQUFYOztBQUNBLE1BQUEsQ0FBTyxDQUFDLENBQVIsRUFBVyxLQUFBLENBQU0scUJBQU4sRUFBNkIscUJBQTdCLENBQVg7O0FBQ0EsTUFBQSxDQUFRLENBQVIsRUFBVyxLQUFBLENBQU0scUJBQU4sRUFBNkIscUJBQTdCLENBQVg7O0FBQ0EsTUFBQSxDQUFRLENBQVIsRUFBVyxLQUFBLENBQU0scUJBQU4sRUFBNkIscUJBQTdCLENBQVg7O0FBRUEsS0FBQSxDQUFNLG1CQUFOIiwic291cmNlc0NvbnRlbnQiOlsiYXNzZXJ0ID0gY2hhaS5hc3NlcnQuZGVlcFN0cmljdEVxdWFsXHJcbnJhbmdlID0gXy5yYW5nZVxyXG5wcmludCA9IGNvbnNvbGUubG9nXHJcbnByaW50ICcjIyMjIyBiZWdpbiAjIyMjIydcclxuIFxyXG5yZXZlcnNlID0gKGEpIC0+IGEucmV2ZXJzZSgpICBcclxuc2lnbiA9IChhLGIpIC0+IChpZiBhIDwgYiB0aGVuIDEgZWxzZSAoaWYgYSA+IGIgdGhlbiAtMSBlbHNlIDApKVxyXG5hc3NlcnQgLTEsIHNpZ24gMiwxXHJcbmFzc2VydCAgMCwgc2lnbiAzLDMzMyBcclxuYXNzZXJ0ICAxLCBzaWduIDEsMiBcclxuXHJcbmNvbXBhcmUgPSAoYSxiKSAtPlxyXG5cdGlmIHR5cGVvZiBhID09IFwib2JqZWN0XCIgYW5kIHR5cGVvZiBiID09IFwib2JqZWN0XCJcclxuXHRcdGZvciBpIGluIHJhbmdlIE1hdGgubWluIGEubGVuZ3RoLGIubGVuZ3RoXHJcblx0XHRcdGMgPSBjb21wYXJlIGFbaV0sYltpXVxyXG5cdFx0XHRpZiBjICE9IDAgdGhlbiByZXR1cm4gY1xyXG5cdGVsc2VcclxuXHRcdHJldHVybiBzaWduIGEsYiAjKGlmIGEgPiBiIHRoZW4gLTEgZWxzZSAoaWYgYSA8IGIgdGhlbiAxIGVsc2UgMCkpXHJcblx0MFxyXG5cclxuYXNzZXJ0ICAxLGNvbXBhcmUgMTIsMTMgXHJcbmFzc2VydCAgMCxjb21wYXJlIDEyLDEyXHJcbmFzc2VydCAtMSxjb21wYXJlIDEzLDEyXHJcbmFzc2VydCAtMSxjb21wYXJlIFsxLDExXSxbMSwyXVxyXG5hc3NlcnQgIDAsY29tcGFyZSBbMSwxMV0sWzEsMTFdXHJcbmFzc2VydCAgMSxjb21wYXJlIFsxLDJdLFsxLDExXVxyXG5hc3NlcnQgIDEsY29tcGFyZSBbMSwnMTEnXSxbMSwnMiddXHJcbmFzc2VydCAgMCxjb21wYXJlIFsxLCcxMSddLFsxLCcxMSddXHJcbmFzc2VydCAtMSxjb21wYXJlIFsxLCcyJ10sWzEsJzExJ11cclxuXHJcbmJzb3J0ID0gKGxpc3QsY21wPWNvbXBhcmUpIC0+XHJcblx0Zm9yIGkgaW4gcmFuZ2UgbGlzdC5sZW5ndGhcclxuXHRcdGZvciBqIGluIHJhbmdlIGxpc3QubGVuZ3RoLTFcclxuXHRcdFx0W2xpc3Rbal0sIGxpc3RbaisxXV0gPSBbbGlzdFtqKzFdLCBsaXN0W2pdXSBpZiBjbXAobGlzdFtqXSwgbGlzdFtqKzFdKSA8IDBcclxuXHRsaXN0XHJcblxyXG5hc3NlcnQgWzEsMiw4XSwgYnNvcnQgWzEsOCwyXSxjb21wYXJlIFxyXG5hc3NlcnQgWzEsMiw4XSwgYnNvcnQgWzEsOCwyXSxjb21wYXJlXHJcbmFzc2VydCBbWzFdLFsyXSxbOF1dLCBic29ydCBbWzFdLFs4XSxbMl1dLGNvbXBhcmVcclxuYXNzZXJ0IFtbMiwxXSxbMiwyXSxbMiw4XV0sIGJzb3J0IFtbMiwxXSxbMiw4XSxbMiwyXV0sY29tcGFyZVxyXG5hc3NlcnQgW1sxLDddLCBbMSw4XSwgWzEsOV1dLCBic29ydCBbWzEsOF0sIFsxLDddLCBbMSw5XV0sY29tcGFyZVxyXG5hc3NlcnQgWzEsMiwzLDRdLCBic29ydCBbMywyLDQsMV0sIGNvbXBhcmVcclxuXHJcbnBva2VyID0gKGEsYikgLT4gY29tcGFyZSBjYWxjKGEuc3BsaXQoXCIgXCIpKSwgY2FsYyhiLnNwbGl0KFwiIFwiKSlcclxuY2FsYyA9IChoYW5kKSAtPlxyXG5cdGdyb3VwcyA9IF8uZ3JvdXBCeSgnICAyMzQ1Njc4OVRKUUtBJy5pbmRleE9mKGNhcmRbMl0pIGZvciBjYXJkIGluIGhhbmQpXHJcblx0W3Njb3JlLCByYW5rc10gPSBfLnVuemlwIHJldmVyc2UgYnNvcnQgKFtjbnQubGVuZ3RoLCBwYXJzZUludChyYW5rKV0gZm9yIHJhbmssIGNudCBvZiBncm91cHMpXHJcblx0aWYgc2NvcmUubGVuZ3RoID09IDVcclxuXHRcdGlmIGNvbXBhcmUocmFua3MsIFsxNCw1LDQsMywyXSk9PTAgdGhlbiByYW5rcyA9IFs1LDQsMywyLDFdXHJcblx0XHRzdHJhaWdodCA9IGlmIHJhbmtzWzBdIC0gcmFua3NbNF0gPT0gNCB0aGVuIDEgZWxzZSAwXHJcblx0XHRmbHVzaCA9IGlmIF8uc2l6ZShfLnVuaXEoc3VpdC5zdWJzdHJpbmcoMCwyKSBmb3Igc3VpdCBpbiBoYW5kKSkgPT0gMSB0aGVuIDEgZWxzZSAwXHJcblx0XHRzY29yZSA9IFtbWzFdLCBbMywxLDEsMV1dLCBbWzMsMSwxLDJdLCBbNV1dXVtmbHVzaF1bc3RyYWlnaHRdXHJcblx0W3Njb3JlLCByYW5rc10gXHJcblxyXG5hc3NlcnQgLTEsIHBva2VyICdrbDggcnVBIHJ1OCBrbEEga2w5JywgJ3J1NyBzcDIgcnU1IHNwMyBrbEEnXHJcbmFzc2VydCAgMSwgcG9rZXIgJ2tsOCBzcFQga2xLIGhqOSBzcDQnLCAncnU3IHNwMiBydTUgc3AzIGtsQSdcclxuYXNzZXJ0ICAxLCBwb2tlciAna2w4IHJ1QSBydTgga2xBIGtsOScsICdrbDggcnVBIHJ1OCBrbEEga2xUJ1xyXG5hc3NlcnQgLTEsIHBva2VyICdrbDggcnVBIHJ1OCBrbEEga2w5JywgJ2tsOCBydUEgcnU4IGtsQSBrbDcnXHJcbmFzc2VydCAgMSwgcG9rZXIgJ2tsOCBydUEgcnU4IGtsQSBrbDknLCAna2xUIHJ1QSBydVQga2xBIGtsOSdcclxuYXNzZXJ0ICAwLCBwb2tlciAnc3BBIHNwMiBzcDMgc3A0IHNwNScsICdydUEgcnUyIHJ1MyBydTQgcnU1J1xyXG5hc3NlcnQgIDEsIHBva2VyICdzcEEgaGpBIHJ1QSBrbEEgc3A1JywgJ3J1QSBydTIgcnUzIHJ1NCBydTUnXHJcbmFzc2VydCAtMSwgcG9rZXIgJ3J1NyBzcDcgaGo3IGtsNyBzcEonLCAncnU2IHNwNSBoajYga2w2IHNwUSdcclxuYXNzZXJ0IC0xLCBwb2tlciAncnU4IHNwOCBoajgga2w5IHNwOScsICdydTYgc3A2IGhqNiBydTkgaGo5J1xyXG5hc3NlcnQgIDAsIHBva2VyICdydTcgcnUzIHJ1NSBydTkgcnVLJywgJ2hqNyBoajMgaGo1IGhqOSBoaksnXHJcbmFzc2VydCAgMCwgcG9rZXIgJ3J1NyBydTMgcnU1IHJ1OSBydUsnLCAnaGo3IGhqMyBoajUgaGo5IGhqSydcclxuYXNzZXJ0ICAwLCBwb2tlciAncnU3IHJ1MyBydTUgcnU5IHJ1SycsICdoajcgaGozIGhqNSBoajkgaGpLJ1xyXG5hc3NlcnQgIDEsIHBva2VyICdydTcgaGo4IHJ1OSBoajUgcnU2JywgJ2hqNyBydTgga2w5IGhqVCBzcDYnXHJcbmFzc2VydCAgMSwgcG9rZXIgJ3J1NyBoajggcnU4IGtsOCBydUonLCAna2w3IGhqOSBydTkga2w5IHJ1USdcclxuYXNzZXJ0IC0xLCBwb2tlciAncnU3IGhqNyBydTgga2w4IHJ1SicsICdzcDcga2w3IHNwOCBoajggcnVUJ1xyXG5hc3NlcnQgIDEsIHBva2VyICdoajcga2wzIHNwMyBrbDQgaGpBJywgJ3NwNyBoajMgcnUzIGtsSyBzcEEnXHJcbmFzc2VydCAgMSwgcG9rZXIgJ3NwNyBoajMgcnUyIGtsNCBzcEEnLCAnaGo3IHJ1MyBydTUgc3A0IGhqQSdcclxuXHJcbnByaW50ICcjIyMjIyAgZW5kICAjIyMjIycgIFxyXG4iXX0=
//# sourceURL=c:\github\foo\002-pokerhand\index.coffee