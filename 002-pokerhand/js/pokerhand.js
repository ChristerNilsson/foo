// Generated by CoffeeScript 2.3.2
var _, assert, bsort, calc, compare, poker, print, range, reverse, sign;

_ = require('lodash');

range = _.range;

assert = require('assert').deepEqual;

print = console.log;

print('##### begin #####');

reverse = function(a) {
  return a.reverse();
};

sign = function(a, b) {
  if (a < b) {
    return 1;
  } else {
    if (a > b) {
      return -1;
    } else {
      return 0;
    }
  }
};

assert(-1, sign(2, 1));

assert(0, sign(3, 3));

assert(1, sign(1, 2));

compare = function(a, b) {
  var c, i, k, len, ref;
  if (typeof a === "object" && typeof b === "object") {
    ref = range(Math.min(a.length, b.length));
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      c = compare(a[i], b[i]);
      if (c !== 0) {
        return c;
      }
    }
  } else {
    return sign(a, b); //(if a > b then -1 else (if a < b then 1 else 0))
  }
  return 0;
};

assert(1, compare(12, 13));

assert(0, compare(12, 12));

assert(-1, compare(13, 12));

assert(-1, compare([1, 11], [1, 2]));

assert(0, compare([1, 11], [1, 11]));

assert(1, compare([1, 2], [1, 11]));

assert(1, compare([1, '11'], [1, '2']));

assert(0, compare([1, '11'], [1, '11']));

assert(-1, compare([1, '2'], [1, '11']));

bsort = function(list, cmp = compare) {
  var i, j, k, l, len, len1, ref, ref1;
  ref = range(list.length);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    ref1 = range(list.length - 1);
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      j = ref1[l];
      if (cmp(list[j], list[j + 1]) < 0) {
        [list[j], list[j + 1]] = [list[j + 1], list[j]];
      }
    }
  }
  return list;
};

assert([1, 2, 8], bsort([1, 8, 2], compare));

assert([1, 2, 8], bsort([1, 8, 2], compare));

assert([[1], [2], [8]], bsort([[1], [8], [2]], compare));

assert([[2, 1], [2, 2], [2, 8]], bsort([[2, 1], [2, 8], [2, 2]], compare));

assert([[1, 7], [1, 8], [1, 9]], bsort([[1, 8], [1, 7], [1, 9]], compare));

assert([1, 2, 3, 4], bsort([3, 2, 4, 1], compare));

poker = function(a, b) {
  return compare(calc(a.split(" ")), calc(b.split(" ")));
};

calc = function(hand) {
  var card, cnt, flush, groups, rank, ranks, score, straight, suit;
  groups = _.groupBy((function() {
    var k, len, results;
    results = [];
    for (k = 0, len = hand.length; k < len; k++) {
      card = hand[k];
      results.push('  23456789TJQKA'.indexOf(card[2]));
    }
    return results;
  })());
  [score, ranks] = _.unzip(reverse(bsort((function() {
    var results;
    results = [];
    for (rank in groups) {
      cnt = groups[rank];
      results.push([cnt.length, parseInt(rank)]);
    }
    return results;
  })())));
  if (score.length === 5) {
    if (compare(ranks, [14, 5, 4, 3, 2]) === 0) {
      ranks = [5, 4, 3, 2, 1];
    }
    straight = ranks[0] - ranks[4] === 4 ? 1 : 0;
    flush = _.size(_.uniq((function() {
      var k, len, results;
      results = [];
      for (k = 0, len = hand.length; k < len; k++) {
        suit = hand[k];
        results.push(suit.substring(0, 2));
      }
      return results;
    })())) === 1 ? 1 : 0;
    score = [[[1], [3, 1, 1, 1]], [[3, 1, 1, 2], [5]]][flush][straight];
  }
  return [score, ranks];
};

assert(-1, poker('kl8 ruA ru8 klA kl9', 'ru7 sp2 ru5 sp3 klA'));

assert(1, poker('kl8 spT klK hj9 sp4', 'ru7 sp2 ru5 sp3 klA'));

assert(1, poker('kl8 ruA ru8 klA kl9', 'kl8 ruA ru8 klA klT'));

assert(-1, poker('kl8 ruA ru8 klA kl9', 'kl8 ruA ru8 klA kl7'));

assert(1, poker('kl8 ruA ru8 klA kl9', 'klT ruA ruT klA kl9'));

assert(0, poker('spA sp2 sp3 sp4 sp5', 'ruA ru2 ru3 ru4 ru5'));

assert(1, poker('spA hjA ruA klA sp5', 'ruA ru2 ru3 ru4 ru5'));

assert(-1, poker('ru7 sp7 hj7 kl7 spJ', 'ru6 sp5 hj6 kl6 spQ'));

assert(-1, poker('ru8 sp8 hj8 kl9 sp9', 'ru6 sp6 hj6 ru9 hj9'));

assert(0, poker('ru7 ru3 ru5 ru9 ruK', 'hj7 hj3 hj5 hj9 hjK'));

assert(0, poker('ru7 ru3 ru5 ru9 ruK', 'hj7 hj3 hj5 hj9 hjK'));

assert(0, poker('ru7 ru3 ru5 ru9 ruK', 'hj7 hj3 hj5 hj9 hjK'));

assert(1, poker('ru7 hj8 ru9 hj5 ru6', 'hj7 ru8 kl9 hjT sp6'));

assert(1, poker('ru7 hj8 ru8 kl8 ruJ', 'kl7 hj9 ru9 kl9 ruQ'));

assert(-1, poker('ru7 hj7 ru8 kl8 ruJ', 'sp7 kl7 sp8 hj8 ruT'));

assert(1, poker('hj7 kl3 sp3 kl4 hjA', 'sp7 hj3 ru3 klK spA'));

assert(1, poker('sp7 hj3 ru2 kl4 spA', 'hj7 ru3 ru5 sp4 hjA'));

print('#####  end  #####');

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\foo\002-pokerhand\pokerhand.coffee